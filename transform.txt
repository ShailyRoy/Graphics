

import javax.media.opengl.GL2;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.GLProfile;
import javax.media.opengl.awt.GLCanvas;
import javax.swing.JFrame;
import java.util.*;

public class Line implements GLEventListener{
	
	static GLProfile profile = GLProfile.get(GLProfile.GL2);
    static GLCapabilities capabilities = new GLCapabilities(profile);
    // The canvas 
    static GLCanvas glcanvas = new GLCanvas(capabilities);
    
   public static void main(String[] args) {
	      //getting the capabilities object of GL2 profile
	   	  
	      
	      Line l = new Line();
	      //creating frame
	      glcanvas.addGLEventListener(l);
	      glcanvas.setSize(600, 400);
	      
	      final JFrame frame = new JFrame ("straight Line");
	      //adding canvas to frame
	      frame.getContentPane().add(glcanvas);
	      frame.setSize(frame.getContentPane().getPreferredSize());
	      frame.setVisible(true);
	      
	   }
   public void display(GLAutoDrawable drawable) {
	   final GL2 gl = drawable.getGL().getGL2();
	   
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Select Transformation Method:"+"\n"+"1.Translate"+"\n"+"2.Scale"+"\n"+"3.Rotate"+"\n"+"4.Reflect");
	   
	   int i=sc.nextInt();	   
	   
	   float x0,x1,x2,x3,y0,y1,y2,y3;
	   //initial rectangle
	   x0=0f;y0=0f;
	   x1=0f;y1=0.5f;
	   x2=0.5f;y2=0f;
	   x3=0.5f;y3=0.5f;
	   //initial rectangle 
	   
	   if(i==1) {
		   //TRANSLATE
		   System.out.println("give tx and ty");
		   float tx=sc.nextFloat();
		   float ty=sc.nextFloat();
		   
	   gl.glBegin(GL2.GL_LINES);
	   gl.glVertex2d(x0+tx, y0+ty);
	   gl.glVertex2d(x1+tx, y1+ty);
        	  
       gl.glVertex2d(x0+tx, y0+ty);
       gl.glVertex2d(x2+tx, y2+ty);
        	  
       gl.glVertex2d(x1+tx, y1+ty);
       gl.glVertex2d(x3+tx, y3+ty);
        	  
       gl.glVertex2d(x3+tx, y3+ty);
       gl.glVertex2d(x2+tx, y2+ty);
       gl.glEnd();
	   }
	   
	   else if(i==2) {
		   //SCALE
		   System.out.println("Give Scaling Factor");
		   float sx=sc.nextFloat();
		   
		   x3=x3*sx; y3=y3*sx;
		   x2=x2*sx; y2=y2*sx;
		   x1=x1*sx; y1=y1*sx;
		   
		   gl.glBegin(GL2.GL_LINES);
		   gl.glVertex2d(x0, y0);
		   gl.glVertex2d(x1, y1);
	        	  
	       gl.glVertex2d(x0, y0);
	       gl.glVertex2d(x2, y2);
	        	  
	       gl.glVertex2d(x1, y1);
	       gl.glVertex2d(x3, y3);
	        	  
	       gl.glVertex2d(x3, y3);
	       gl.glVertex2d(x2, y2);
	       gl.glEnd();
	   }
	   
	   else if (i==3) {
		   //ROTATE
		   System.out.println("Enter Angle of Rotation");
		   Double theta = sc.nextDouble();
		   Double x1a,y1a,x2a,y2a,x3a,y3a;
		   
		   x1a=x1*Math.cos(theta)-y1*Math.sin(theta);
		   y1a=x1*Math.sin(theta)+y1*Math.cos(theta);
		   
		   x2a=x2*Math.cos(theta)-y2*Math.sin(theta);
		   y2a=x2*Math.sin(theta)+y2*Math.cos(theta);
		   
		   x3a=x3*Math.cos(theta)-y3*Math.sin(theta);
		   y3a=x3*Math.sin(theta)+y3*Math.cos(theta);
		   
		   gl.glBegin(GL2.GL_LINES);
		   gl.glVertex2d(x0, y0);
		   gl.glVertex2d(x1a, y1a);
		   
		   gl.glVertex2d(x0, y0);
	       gl.glVertex2d(x2a, y2a);
	        	  
	       gl.glVertex2d(x1a, y1a);
	       gl.glVertex2d(x3a, y3a);
	        	  
	       gl.glVertex2d(x3a, y3a);
	       gl.glVertex2d(x2a, y2a);
		   gl.glEnd();
	   }
	   
	   else if(i==4) {
		   //REFLECT
		   System.out.println("Define Reflection Quadrant, 1-4");
		   int j=sc.nextInt();
		   if(j==1) {
			   gl.glBegin(GL2.GL_LINES);
			   gl.glVertex2d(x0, y0);
			   gl.glVertex2d(x1, y1);
		        	  
		       gl.glVertex2d(x0, y0);
		       gl.glVertex2d(x2, y2);
		        	  
		       gl.glVertex2d(x1, y1);
		       gl.glVertex2d(x3, y3);
		        	  
		       gl.glVertex2d(x3, y3);
		       gl.glVertex2d(x2, y2);
		       gl.glEnd();   
		   }
		   else if(j==2) {
			   //Reflect to Y
			   gl.glBegin(GL2.GL_LINES);
			   gl.glVertex2d(x0, y0);
			   gl.glVertex2d(x1, y1);
		        	  
		       gl.glVertex2d(x0, y0);
		       gl.glVertex2d(-x2, y2);
		        	  
		       gl.glVertex2d(x1, y1);
		       gl.glVertex2d(-x3, y3);
		        	  
		       gl.glVertex2d(-x3, y3);
		       gl.glVertex2d(-x2, y2);
		       gl.glEnd();
			   
		   }
		   else if(j==3) {
			   //reflect to -x,-y
			   gl.glBegin(GL2.GL_LINES);
			   gl.glVertex2d(x0, y0);
			   gl.glVertex2d(-x1, -y1);
		        	  
		       gl.glVertex2d(x0, y0);
		       gl.glVertex2d(-x2, -y2);
		        	  
		       gl.glVertex2d(-x1, -y1);
		       gl.glVertex2d(-x3, -y3);
		        	  
		       gl.glVertex2d(-x3, -y3);
		       gl.glVertex2d(-x2, -y2);
		       gl.glEnd();
			   
		   }
		   else if(j==4) {
			   //reflect to x
			   gl.glBegin(GL2.GL_LINES);
			   gl.glVertex2d(x0, y0);
			   gl.glVertex2d(x1, -y1);
		        	  
		       gl.glVertex2d(x0, y0);
		       gl.glVertex2d(x2, y2);
		        	  
		       gl.glVertex2d(x1, -y1);
		       gl.glVertex2d(x3, -y3);
		        	  
		       gl.glVertex2d(x3, -y3);
		       gl.glVertex2d(x2, y2);
		       gl.glEnd();
			   
		   }
		   
		   
	   }
          
      
   }
   
   public void dispose(GLAutoDrawable arg0) {
      //method body
   }

   
   public void init(GLAutoDrawable drawable) {
      // method body
	   //4. drive the display() in a loop
	    }
   
   public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3, int arg4) {
      // method body
   }
   //end of main
}//end of classimport javax.media.opengl.GL2;
